class Jarros:
    def __init__(self, x, y):
        self.x = x  # Jarro 1
        self.y = y  # Jarro 2
        self.caminho = []  # Armazena os caminhos percorridos
        self.fila = []  # Armazena n√≥s n√£o percorridos temporariamente
        self.vertice = []  # Armazena temporariamente v√©rtices que podem ser gerados em um n√≥

    '''Fun√ß√£o respons√°vel por executar a l√≥gica de inser√ß√£o de um caminho'''

    def register(self, x, y):
        if [x, y] not in self.caminho and [x, y] not in self.fila:
            self.vertice.append([x, y])

            self.fila.append([x, y])

            return False  # Novo caminho
        else:
            return True  # Um caminho de [x, y] j√° foi percorrido

    '''Fun√ß√£o respons√°vel por definir o objetivo'''

    def defineGoal(self, x, y):
        self.caminho.append([self.x, self.y])  # Caminho inicial [0, 0]

        while True:

            if x == self.x and y == self.y:
                print('')
                print("üöÄ Finalizou üöÄ")
                print('')
                print(f'Caminho: {self.caminho}')
                break
            else:
                self.defineRules(self.x, self.y)

    ''' Fun√ß√£o respons√°vel por aplicar as regras determinadas no exerc√≠cio do Jarro d'√°gua. '''

    def defineRules(self, x, y):
        include = []  # Armazena se o caminho √© repetido ou n√£o

        print('')
        print('------------------|')
        print(f'Aplicando: {x, y} |')
        print('------------------|')

        if x < 3:
            repeated = self.register(3, y)  # Regra R1
            include.append(repeated)
            if not repeated:
                print('## R1 ##')

        if y < 4:
            repeated = self.register(x, 4)  # Regra R2
            include.append(repeated)
            if not repeated:
                print('## R2 ##')

        if x > 0:
            repeated = self.register(0, y)  # Regra R3
            include.append(repeated)
            if not repeated:
                print('## R3 ##')

        if y > 0:
            repeated = self.register(x, 0)  # Regra R4
            include.append(repeated)
            if not repeated:
                print('## R4 ##')

        if y > 0 and (x + y) <= 3:
            repeated = self.register(x + y, 0)  # Regra R5
            include.append(repeated)
            if not repeated:
                print('## R5 ##')

        if y > 0 and (x + y) > 3:
            repeated = self.register(3, y - (3 - x))  # Regra R6
            include.append(repeated)
            if not repeated:
                print('## R6 ##')

        if x > 0 and (x + y) <= 4:
            repeated = self.register(0, x + y)  # Regra R7
            include.append(repeated)
            if not repeated:
                print('## R7 ##')

        if x > 0 and (x + y) > 4:
            repeated = self.register(x - (4 - y), 4)  # Regra R8
            include.append(repeated)
            if not repeated:
                print('## R8 ##')

        print('')

        # Se todos os n√≥s gerados forem iguais a pelo menos um n√≥ que j√° foi feito caminho, n√£o existir√° uma nova ramifica√ß√£o
        noRemification = all(x == True for x in include)

        include = []

        # Zera os v√©rtices analisados de um n√≥. Partindo para o pr√≥ximo n√≥...
        self.vertice = []

        if noRemification:
            print('')
            print('N√£o h√° ramifica√ß√µes')
            # Pega o √∫ltimo v√©rtice que n√£o foi percorrido, caso n√£o exista mais ramifica√ß√µes no n√≥.
            [self.x, self.y] = self.fila.pop(0)
            # Adiciona no caminho j√° que estar√° sendo percorrido
            self.caminho.append([self.x, self.y])

            return

        # Seleciona o n√≥ irm√£o para realizar a busca
        [self.x, self.y] = self.fila.pop(0)
        self.caminho.append([self.x, self.y])
